{"./":{"url":"./","title":"开篇","keywords":"","body":"程序员的手艺 写代码也是一种手艺. 内容是我作为程序员的总结,实践,保证内容的真实可用. 涵盖环境搭建,编程总结,技术实践,知识管理等等,都是干货分享. 阅读地址: http://book.zhaopeng.me 更新首发: http://zhaopeng.me 更新记录: 2017年04月09日 加入 mac 系统环境搭建 Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/":{"url":"mac/","title":"介绍","keywords":"","body":"介绍 系统设置 xcode 配置 Homebrew 使用 Cask iTerm zsh git 忽略文件 java maven node vscode Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/SystemPreferences/":{"url":"mac/SystemPreferences/","title":"系统设置","keywords":"","body":"系统设置 在任何的操作系统中，首先你需要做一件事就是更新系统，点击窗口左上角的  > 关于本机 > 软件更新 。此外，如果这是一部新的电脑，你还需要到系统设置进行一些适当调整。如何调整，取决于个人喜好。 触控板 系统设置 > 触控板 光标与点击 ✓ 轻拍来点按 ✓ 辅助点按 ✓ 查找 ✓ 三指拖移 滚动缩放 ✓ 默认全选 更多手势 ✓ 默认全选 Dock 置于屏幕上的位置：左边 设置 Dock 图标更小（大小随个人喜好） ✓ 自动显示和隐藏 Dock Finder Finder > 显示 显示标签页栏 显示路径栏 显示状态栏 自定工具栏 > 去除所有按钮，仅剩搜索栏 Finder > 偏好设置 通用 开启新 Finder 窗口时打开：HOME「用户名」目录 边栏 添加 HOME「用户名」目录 和 创建代码文件目录 将 共享的(shared) 和 标记(tags) 目录去掉 菜单栏 去掉蓝牙等无需经常使用的图标 将电池显示设置为百分比 Spotlight 我去除了所有,看个人的喜好,我使用 alrt ,请查看 alrt 的使用. 去掉字体和书签与历史记录等不需要的内容 Mission Control 通过屏幕四个角快速操作 系统设置 > Mission Control > 触发角 右上角 Launchpad 右下角 桌面 左上角 Mission Control 左下角 应用程序窗口 设置快捷键 系统设置 > 键盘 > 快捷键 Launchpad 与 Dock × 打开或关闭 Dock 隐藏 Mission Control × 全部去除 输入法 ✓ 选择上一个输入法 屏幕快照 × 全部去除 Spotlight × 全部去除 允许任何来源的应用 在 10.12.4 以后,需要执行 sudo spctl --master-disable才可以打开任何来源. 系统设置 > 安全性和隐私 > 通用 鼠标 由于 mac 默认和 windows 的鼠标滚动不一致,调整和 windows 保持一致. 系统设置 > 鼠标 × 滚动方向:自然 互联网帐户 添加 iCloud 用户，同步日历，联系人和 Find my mac 等等 Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/xcode/":{"url":"mac/xcode/","title":"xcode 配置","keywords":"","body":"xcode 作为一个开发人员, xcode 是必装的,8.3 以前可以不通过 App Store是进行离线安装,但是现在不行了,只能通过 App Store是来安装了,好在以后可以增量更新,不用每次都下载一个整包更新了. xode 下载地址 https://itunes.apple.com/us/app/xcode/id497799835 安装成功之后,安装 Xcode command line tools,运行: xcode-select --install 强烈建议安装,里面包含大量有用的命令,可以到 /Library/Developer/CommandLineTools/usr/bin 查看所有的命令. -rwxr-xr-x 1 root admin 22704 3 25 03:44 BuildStrings -rwxr-xr-x 1 root admin 29184 3 25 03:44 CpMac -rwxr-xr-x 1 root admin 105136 3 25 03:44 DeRez -rwxr-xr-x 1 root admin 18416 3 25 03:44 GetFileInfo -rwxr-xr-x 1 root admin 62352 3 25 03:44 MergePef -rwxr-xr-x 1 root admin 22896 3 25 03:44 MvMac -rwxr-xr-x 1 root admin 24304 3 25 03:44 ResMerger -rwxr-xr-x 1 root admin 111040 3 25 03:44 Rez -rwxr-xr-x 1 root admin 40240 3 25 03:44 RezDet -rwxr-xr-x 1 root admin 22736 3 25 03:44 RezWack -rwxr-xr-x 1 root admin 22768 3 25 03:44 SetFile -rwxr-xr-x 1 root admin 23648 3 25 03:44 SplitForks -rwxr-xr-x 1 root admin 22704 3 25 03:44 UnRezWack -rwxr-xr-x 1 root admin 33504 3 25 03:44 ar -rwxr-xr-x 1 root admin 27616 3 25 03:44 as -rwxr-xr-x 1 root admin 18080 3 25 03:44 asa -rwxr-xr-x 1 root admin 219744 3 25 03:44 bison -rwxr-xr-x 1 root admin 148624 3 25 03:44 bitcode_strip lrwxr-xr-x 1 root admin 5 4 8 15:46 c++ -> clang -rwxr-xr-x 1 root admin 23040 3 25 03:44 c89 -rwxr-xr-x 1 root admin 23136 3 25 03:44 c99 lrwxr-xr-x 1 root admin 5 4 8 15:46 cc -> clang -rwxr-xr-x 1 root admin 57967552 3 25 03:44 clang lrwxr-xr-x 1 root admin 5 4 8 15:46 clang++ -> clang -rwxr-xr-x 1 root admin 118928 3 25 03:44 cmpdylib -rwxr-xr-x 1 root admin 144464 3 25 03:44 codesign_allocate -rwxr-xr-x 1 root admin 3344 2 28 08:26 cpp -rwxr-xr-x 1 root admin 27584 3 25 03:44 ctags -rwxr-xr-x 1 root admin 144448 3 25 03:44 ctf_insert lrwxr-xr-x 1 root admin 13 4 8 15:46 dsymutil -> llvm-dsymutil -rwxr-xr-x 1 root admin 1077968 3 25 03:44 dsymutil-classic -rwxr-xr-x 1 root admin 985488 3 25 03:44 dwarfdump -rwxr-xr-x 1 root admin 170368 3 25 03:44 dyldinfo -rwxr-xr-x 1 root admin 576432 3 25 03:44 flex -rwxr-xr-x 1 root admin 576432 3 25 03:44 flex++ lrwxr-xr-x 1 root admin 3 4 8 15:46 g++ -> gcc -rwxr-xr-x 1 root admin 103188 2 28 08:59 gatherheaderdoc -rwxr-xr-x 1 root admin 18560 3 25 03:44 gcc lrwxr-xr-x 1 root admin 8 4 8 15:46 gcov -> llvm-cov -rwxr-xr-x 1 root admin 1908928 3 25 03:44 git -rwxr-xr-x 1 root admin 163282 2 28 08:59 git-cvsserver lrwxr-xr-x 1 root admin 3 4 8 15:46 git-receive-pack -> git -rwxr-xr-x 1 root admin 971520 3 25 03:44 git-shell lrwxr-xr-x 1 root admin 3 4 8 15:46 git-upload-archive -> git -rwxr-xr-x 1 root admin 1046112 3 25 03:44 git-upload-pack -rwxr-xr-x 1 root admin 141856 3 25 03:44 gm4 -rwxr-xr-x 1 root admin 160528 3 25 03:44 gnumake -rwxr-xr-x 1 root admin 90656 3 25 03:44 gperf -rwxr-xr-x 1 root admin 24272 3 25 03:44 hdxml2manxml -rwxr-xr-x 1 root admin 162025 2 28 08:59 headerdoc2html -rwxr-xr-x 1 root admin 65312 3 25 03:44 indent -rwxr-xr-x 1 root admin 135504 3 25 03:44 install_name_tool -rwxr-xr-x 1 root admin 1759136 3 25 03:44 ld -rwxr-xr-x 1 root admin 230 2 28 08:48 lex -rwxr-xr-x 1 root admin 153200 3 25 03:44 libtool -rwxr-xr-x 1 root admin 65280 3 25 03:44 lipo -rwxr-xr-x 1 root admin 69056 3 25 03:44 lldb -rwxr-xr-x 1 root admin 2284448 3 25 03:44 llvm-cov -rwxr-xr-x 1 root admin 20233760 3 25 03:44 llvm-dsymutil -rwxr-xr-x 1 root admin 2123632 3 25 03:44 llvm-dwarfdump -rwxr-xr-x 1 root admin 7517296 3 25 03:44 llvm-nm -rwxr-xr-x 1 root admin 8667360 3 25 03:44 llvm-objdump -rwxr-xr-x 1 root admin 32240 3 25 03:44 llvm-otool -rwxr-xr-x 1 root admin 526208 3 25 03:44 llvm-profdata -rwxr-xr-x 1 root admin 1960544 3 25 03:44 llvm-size -rwxr-xr-x 1 root admin 3567 2 28 08:53 lorder -rwxr-xr-x 1 root admin 141856 3 25 03:44 m4 -rwxr-xr-x 1 root admin 160528 3 25 03:44 make -rwxr-xr-x 1 root admin 7604 2 28 08:52 mig -rwxr-xr-x 1 root admin 3373 2 28 08:53 mkdep -rwxr-xr-x 1 root admin 334288 3 25 03:44 nasm -rwxr-xr-x 1 root admin 156864 3 25 03:44 ndisasm lrwxr-xr-x 1 root admin 7 4 8 15:46 nm -> llvm-nm -rwxr-xr-x 1 root admin 131648 3 25 03:44 nm-classic -rwxr-xr-x 1 root admin 161264 3 25 03:44 nmedit lrwxr-xr-x 1 root admin 12 4 8 15:46 objdump -> llvm-objdump lrwxr-xr-x 1 root admin 10 4 8 15:46 otool -> llvm-otool -rwxr-xr-x 1 root admin 635072 3 25 03:44 otool-classic -rwxr-xr-x 1 root admin 131536 3 25 03:44 pagestuff -rwxr-xr-x 1 root admin 23232 3 25 03:44 projectInfo lrwxr-xr-x 1 root admin 7 4 8 15:46 ranlib -> libtool -rwxr-xr-x 1 root admin 57872 3 25 03:44 rebase -rwxr-xr-x 1 root admin 203120 3 25 03:44 redo_prebinding -rwxr-xr-x 1 root admin 62288 3 25 03:44 resolveLinks -rwxr-xr-x 1 root admin 73392 3 25 03:44 rpcgen -rwxr-xr-x 1 root admin 44096 3 25 03:44 segedit lrwxr-xr-x 1 root admin 9 4 8 15:46 size -> llvm-size -rwxr-xr-x 1 root admin 118944 3 25 03:44 size-classic -rwxr-xr-x 1 root admin 119296 3 25 03:44 strings -rwxr-xr-x 1 root admin 187488 3 25 03:44 strip -rwxr-xr-x 1 root admin 297872 3 25 03:44 svn -rwxr-xr-x 1 root admin 105984 3 25 03:44 svnadmin -rwxr-xr-x 1 root admin 93888 3 25 03:44 svnbench -rwxr-xr-x 1 root admin 56960 3 25 03:44 svndumpfilter -rwxr-xr-x 1 root admin 63456 3 25 03:44 svnfsfs -rwxr-xr-x 1 root admin 90160 3 25 03:44 svnlook -rwxr-xr-x 1 root admin 61712 3 25 03:44 svnmucc -rwxr-xr-x 1 root admin 81920 3 25 03:44 svnrdump -rwxr-xr-x 1 root admin 104608 3 25 03:44 svnserve -rwxr-xr-x 1 root admin 82752 3 25 03:44 svnsync -rwxr-xr-x 1 root admin 36256 3 25 03:44 svnversion -rwxr-xr-x 1 root admin 68492224 3 25 03:44 swift -rwxr-xr-x 1 root admin 4322864 3 25 03:44 swift-build -rwxr-xr-x 1 root admin 423456 3 25 03:44 swift-demangle -rwxr-xr-x 1 root admin 4322864 3 25 03:44 swift-package -rwxr-xr-x 1 root admin 52432 3 25 03:44 swift-stdlib-tool -rwxr-xr-x 1 root admin 4322848 3 25 03:44 swift-test lrwxr-xr-x 1 root admin 5 4 8 15:46 swiftc -> swift -rwxr-xr-x 1 root admin 10320800 3 25 03:44 tapi -rwxr-xr-x 1 root admin 32448 3 25 03:44 unifdef -rwxr-xr-x 1 root admin 2946 2 28 08:53 unifdefall -rwxr-xr-x 1 root admin 49184 3 25 03:44 unwinddump -rwxr-xr-x 1 root admin 18000 3 25 03:44 what -rwxr-xr-x 1 root admin 36960 3 25 03:44 xml2man -rwxr-xr-x 1 root admin 135 2 28 08:54 yacc Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/Homebrew/":{"url":"mac/Homebrew/","title":"Homebrew","keywords":"","body":"Homebrew Homebrew 是一个很强大的包管理工具,让我们可以很方便的安装命令和软件. 安装 安装 Homebrew 必须安装 Xcode Command Line Tools. 安装命令 /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 安装成功之后,测试一下. brew doctor 注: 安装完成后，Homebrew 会将本地 /usr/local 初始化为 git 的工作树，并将目录所有者变更为当前所操作的用户，将来 brew 的相关操作不需要 sudo 。 Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/Homebrew/0.Usage.html":{"url":"mac/Homebrew/0.Usage.html","title":"使用","keywords":"","body":"Homebrew 基本使用 帮助命令 brew -h brew search * -搜索 brew install * -安装 brew uninstall * -卸载 brew list —列出已安装的软件 brew update —更新Homebrew brew home *—用浏览器打开 brew info *—显示软件内容信息 brew deps * — 显示包依赖 brew -h brew —帮助 中科大 homebrew 镜像 cd /usr/local/ git remote set-url origin http://mirrors.ustc.edu.cn/homebrew.git brew update 如果有问题，如下操作： cd ~/tmp git clone http://mirrors.ustc.edu.cn/homebrew.git rm -rf /usr/local/.git rm -rf /usr/local/Library cp -R homebrew/.git /usr/local/ cp -R homebrew/Library /usr/local/ brew update 使用homebrew-science或者homebrew-python cd /usr/local/Library/Taps/homebrew/homebrew-science git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew-science.git cd /usr/local/Library/Taps/homebrew/homebrew-python git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew-python.git brew update CategoryMirrorUsage 安装 node-canvas (源代码安装) 1.pkg-config $ curl http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz -o pkgconfig.tgz $ tar -zxf pkgconfig.tgz && cd pkg-config-0.28 $ ./configure --with-internal-glib && make install 2.pixman $ curl http://www.cairographics.org/releases/pixman-0.30.0.tar.gz -o pixman.tar.gz $ tar -zxf pixman.tar.gz && cd pixman-0.30.0/ $ ./configure --prefix=/usr/local --disable-dependency-tracking $ make install 3.libpng & export ... $ brew install libpng $ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig $ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig 4.node-canvas $ npm install canvas or from source: $ node-gyp rebuild 5.如果出现错误 Error: error while reading from input stream or: Error: Image given has not completed loaded 安装如下库： brew install giflib # for .gif files brew install libjpeg # for .jpg files 再重新编译 node-canvas 安装开发常用的包 brew install wget watch tmux cmake openssl imagemagick graphicsmagick gearman geoip readline autoconf multitail source-highlight autojump zsh-completions sshfs 升级一下系统自带的vim brew install ctags macvim --env-std --override-system-vim #### Cakebrew 如果你不喜欢命令行方式来管理，那么 Cakebrew 是极好的选择。Cakebrew App 提供了可视化的界面来接管一部分 brew 命令，大多数操作都可以直接在界面上点几下来完成。 下载地址 Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/Homebrew/1.Cask.html":{"url":"mac/Homebrew/1.Cask.html","title":"Cask","keywords":"","body":"Homebrew Cask 你已经感受到了使用 Homebrew 安装命令行程序的便利。那么接下来，我们将通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。 安装 安装 Homebrew-cask 是如此的简单直接，运行以下命令即可完成： brew tap caskroom/cask 使用 我比较喜欢通过 App Store 或者其他方式手动安装 APP,不过通过 brew cask 一些 app 也比较的方便. brew cask install google-chrome // 安装 Google 浏览器 brew update && brew upgrade brew-cask && brew cleanup // 更新 搜索 如果你想查看 cask 上是否存在你需要的 app，可以到 caskroom.io 进行搜索。 文件预览插件 有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。 下面这个是从 https://github.com/sindresorhus/quick-look-plugins 复制的. Quick Look plugins List of useful Quick Look plugins for developers Install Using Homebrew Cask Run brew cask install Install all 一次性安装 brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql qlimagesize webpquicklook suspicious-package quicklookase qlvideo Manually Click \"download manually\" Move the downloaded .qlgenerator file to ~/Library/QuickLook Run qlmanage -r Plugins QLColorCode Preview source code files with syntax highlighting Run brew cask install qlcolorcode or download manually QLStephen Preview plain text files without or with unknown file extension. Example: README, CHANGELOG, index.styl, etc. Run brew cask install qlstephen or download manually QLMarkdown Preview Markdown files Run brew cask install qlmarkdown or download manually QuickLookJSON Preview JSON files Run brew cask install quicklook-json or download manually QLPrettyPatch Preview .patch files Run brew cask install qlprettypatch or download manually QuickLookCSV Preview CSV files Run brew cask install quicklook-csv or download manually BetterZipQL Preview archives Run brew cask install betterzipql or download manually qlImageSize Display image size and resolution Run brew cask install qlimagesize or download manually WebP Preview WebP images Run brew cask install webpquicklook or download manually Suspicious Package Preview the contents of a standard Apple installer package Run brew cask install suspicious-package or download manually QuickLookASE Preview Adobe ASE Color Swatches generated with Adobe Photoshop, Adobe Illustrator, Adobe Color CC, Spectrum, COLOURlovers, Prisma, among many others. Run brew cask install quicklookase or download manually QLVideo Preview most types of video files, as well as their thumbnails, cover art and metadata Run brew cask install qlvideo or download manually More These are not included in Install all. ProvisionQL Preview iOS / macOS app and provision information Run brew cask install provisionql or download manually QuickLookAPK Preview Android APK files Run brew cask install quicklookapk or download manually quicklook-pat Preview Adobe Photoshop pattern files Run brew cask install quicklook-pat or download manually 系统服务管理 brew services 命令安装 安装完 homebrew 默认是没有这个命令的，通过 brew services 可以方便地管理通过 homebrew 安装的服务进程，比如 nginx, mysql 等 brew tap homebrew/services Install and start service mysql at login brew install mysql brew services start mysql Stop service mysql: brew services stop mysql Restart service mysql: brew services restart mysql Install and start dnsmasq service at boot brew install dnsmasq sudo brew services start dnsmasq SYNOPSIS 如果没有权限,请添加sudo执行 brew services list brew services restart brew services start brew services stop brew services cleanup LaunchRocket — 用于管理 homebrew 安装的服务。可以通过cask来安装。 brew tap jimbojsb/launchrocket brew cask install launchrocket Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/iTerm/":{"url":"mac/iTerm/","title":"iTerm","keywords":"","body":"iTerm 我用 mac 作为开发首选,就是特别钟情于mac 终端的好用,而 iterm 是特别好处的终端,再加入 zsh 那就是超级好用. 安装 http://www.iterm2.com/ 到官网下载. 配置使用 默认界面 默认的 iterm 也不是很强大,还的需要很多配置才能适合自己.建议安装了 zsh 后再来配置,配合 zsh 更能完成更强大的功能. 我常用的配置的将 iTerm 固定在屏幕的顶部,方便查看. 打开 iTerm 的配置: Preferences > General Closing x Confirm closing mutiple sessions x Confrim \"Quit iTerm2\" command Services x Check for updates automatically Preferences > Appearance Window x Hide scrollbars Preferences > Profiles > Default > Window Settings for New Windows Style ✓ Full-With Top Of Screen 固定的屏幕顶部 Preferences > Keys Hotkey ✓ 设置自己适合的快捷键 Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/iTerm/zsh.html":{"url":"mac/iTerm/zsh.html","title":"zsh","keywords":"","body":"zsh zsh 是 shell 中的极品,让shell 的使用更加的便利,强大,必装软件. 我们将安装 zsh ，其拓展功能和主题将由 oh-my-zsh 提供。其中Env.sh 文件用于维护别名（aliases），输出（exports）和路径改变（path changes）等等，以免影响 ~/.zshrc。 官网 http://ohmyz.sh/ 安装 使用 Homebrew 完成 zsh 和 zsh completions 的安装 brew install zsh zsh-completions 安装完成之后,可以根据提醒进行一些操作. 安装 oh-my-zsh 让 zsh 获得拓展功能和主题 curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh 创建一个配置文件 cd ~ mkdir -p ~/Projects/config cd Projects/config touch env.sh 用文本编辑器或 vi/code 打开 .zshrc 进行以下编辑: ZSH_THEME=ys plugins=(git colored-man colorize github pip python brew osx zsh-syntax-highlighting) alias zshconfig=\"code ~/.zshrc\" alias envconfig=\"code ~/Projects/config/env.sh\" 用文本编辑器或 vi/code 打开 ~/Projects/config/env.sh 进行以下编辑: #!/bin/zsh # PATH export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\" export EDITOR='code -w' # export PYTHONPATH=$PYTHONPATH # export MANPATH=\"/usr/local/man:$MANPATH\" # Owner export USER_NAME=\"YOUR NAME\" # FileSearch function f() { find . -iname \"*$1*\" ${@:2} } function r() { grep \"$1\" ${@:2} -R . } #mkdir and cd function mkcd() { mkdir -p \"$@\" && cd \"$_\"; } # Aliases 最终会是这样 注： 如果是新增环境变量或者是修改环境变量的值，都需要 source 一下才能立即生效。 如果是删除一个环境变量，必须输入 exit 以 logout 当前 shell ，然后再重新打开一个新的 shell 并 login 才能生效。 我常用的文本编辑器的是 vscode, 等安装了 vscode , 我会变 vi 改成 code. Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/git/":{"url":"mac/git/","title":"git","keywords":"","body":"git git 现在也是很重要很重要的工具,必装软件. 使用 Xcode command line tools 自带了 git, 可能不会最新版本,我一般都会使用 brew 来自己安装. 安装 brew install git 配置 配置用户名和邮箱 git 必须要配置用户名和邮箱,用来git 记录使用. git config --global user.name \"Your Name Here\" git config --global user.email \"your_email@youremail.com\" 永久存储账号密码 默认使用 git 进行操作的时候,都需要输入用户名和密码的,不太方便,运行一下命令来永久存储. git config --global credential.helper osxkeychain 别名设置 git 操作有时候会很麻烦,设置一些别名简化命令的输入. alias g=\"git $*\" alias gc=\"git commit -m $*\" alias gp=\"git push\" alias gpp=\"git pull\" alias ga=\"git add\" alias gaa=\"git add .\" alias gs=\"git status\" alias gl=\"git log --oneline --all --graph --decorate $*\" 注: 将上面的代码可以添加到 ~/Projects/config/env.sh 中. Git常用备忘 配置 git config --global user.name \"robbin\" git config --global user.email \"fankai@gmail.com\" git config --global color.ui true git config --global alias.co checkout git config --global alias.ci commit git config --global alias.st status git config --global alias.br branch git config --global core.editor \"mate -w\" # 设置Editor使用textmate git config -l # 列举所有配置 Git常用命令 查看、添加、提交、删除、找回，重置修改文件 git help # 显示command的help git show # 显示某次提交的内容 git show $id git co -- # 抛弃工作区修改 git co . # 抛弃工作区修改 git add # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm # 从版本库中删除文件 git rm --cached # 从版本库中删除文件，但不删除文件 git reset # 从暂存区恢复到工作文件 git reset -- . # 从暂存区恢复到工作文件 git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git ci -am \"some comments\" git ci --amend # 修改最后一次提交记录 git revert # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象 git revert HEAD # 恢复最后一次提交的状态 查看文件diff git diff # 比较当前文件和暂存区文件差异 git diff git diff # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff --staged # 比较暂存区和版本库差异 git diff --cached # 比较暂存区和版本库差异 git diff --stat # 仅仅比较统计信息 查看提交记录 git log git log # 查看该文件每次提交记录 git log -p # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log --stat # 查看提交统计信息 分支合并和rebase git merge # 将branch分支合并到当前分支 git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master # 将master rebase到branch，相当于： git co && git rebase master && git co master && git merge Git补丁管理(方便在多台机器上开发同步时用) git diff > ../sync.patch # 生成补丁 git apply ../sync.patch # 打补丁 git apply --check ../sync.patch # 测试补丁能否成功 Git暂存管理 git stash # 暂存 git stash list # 列所有stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 Git远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b origin/ # 基于远程分支创建本地分支，功能同上 git push # push所有分支 git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin # 创建远程分支， origin是远程仓库名 git push origin : # 创建远程分支 git push origin : #先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理 git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库 git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库 git remote add origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master # 设置远程仓库的HEAD指向master分支 也可以命令设置跟踪远程库和本地库 git branch --set-upstream master origin/master git branch --set-upstream develop origin/develop Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/git/gitignore.html":{"url":"mac/git/gitignore.html","title":"忽略文件","keywords":"","body":"git 文件忽略 创建一个新文件 ~/.gitignore ，并将以下内容添加进去，这样全部 git 仓库将会忽略以下内容所提及的文件。 常见 下面这个是一个常见的一些 # Folder view configuration files .DS_Store Desktop.ini # Thumbnail cache files ._* Thumbs.db # Files that might appear on external disks .Spotlight-V100 .Trashes # Compiled Python files *.pyc # Compiled C++ files *.out # Application specific files venv node_modules .sass-cache 在线生成 这个网站可以根据输入的调节自动生成忽略文件. https://www.gitignore.io/ Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/java/":{"url":"mac/java/","title":"java","keywords":"","body":"java 做 java 开发的,不用说了, java 必装的,用 brew 让安装 java 更加方便,环境变量都会自动配置了. 安装 先搜索一下 brew search java 根据版本来安装 brew install Caskroom/cask/java 安装成功后执行 java -version 可以查看一下是否正确. Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/maven/":{"url":"mac/maven/","title":"maven","keywords":"","body":"maven maven 是 java 中的利器,必装,继续使用 brew 来安装. 安装 先搜索一下 brew search java 根据版本来安装 brew install maven 安装成功后执行 mvn --version 可以查看一下是否正确. 更改国内镜像 maven 默认使用的是国外的服务器,国内访问的话,速度就很慢了,很幸运的是阿里提供的了一个镜像,速度提升百倍,建议更换. 使用 mvn --version 可以查看到 maven 的安装目录,我的在这里/usr/local/Cellar/maven/3.5.0/libexec/conf. 修改 settings.xml 文件,在 mirrors 节点添加下面的代码,就可以了. nexus-aliyun * Nexus aliyun http://maven.aliyun.com/nexus/content/groups/public Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/node/":{"url":"mac/node/","title":"node","keywords":"","body":"node 在当前 node 大放光彩的时代, node 必装. node 版本更新差异比较大,有时候需要多个版本的切换,我们使用nvm来管理 node 的版本. 安装 nvm 先搜索一下 brew search nvm 安装 brew install nvm 将下面的代码添加到 ~/.zshrc 可以执行命令 zshconfig 快速编辑. export NVM_DIR=\"$HOME/.nvm\" . \"/usr/local/opt/nvm/nvm.sh\" 安装 node 查看本地安装的 node 版本 nvm list 查看所有的 node 版本 nvm ls-remote 安装 选择一个适合的版本来安装,当前的稳定版本是 6.10.2,最新版本是 v7.8.0. 我比较喜欢用新版本,就安装 v7.8.0 这个版本. nvm install 7.8.0 将安装的版本设置为默认版本. nvm use 7.8.0 nvm alias default 7.8.0 查看一下当前node的版本 node -v 升级一下 npm npm install -g npm 查看 npm 的版本 npm --version Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "},"mac/vscode/":{"url":"mac/vscode/","title":"vscode","keywords":"","body":"vscode 比起 sublime text 或者 atom,我更推荐使用的 vscode 文本编辑器,配合插件 Settings Sync 进行插件和配置的同步,很适合我多个平台多个电脑的进行同步,使用同一套习惯. 插件丰富,我也贡献了一个给文件头部添加更新内容的插件,当然也要支持自己的啊! https://marketplace.visualstudio.com/items?itemName=mikey.vscode-fileheader 下载 打开官网下载自己合适的平台就可以了. 官网: https://code.visualstudio.com/ 配置同步 安装同步插件 Settings Sync必装,它是通过 github 提供的 gist 服务进行同步,所以必须要有 github 的账号. 使用 按 F1 输入 sync,会让你输入github 的 token 和 gist 的 id, 没有的话就按照提醒进行申请. 几个配置说明 sync: Download Settings 下载配置 sync: Update / Upload Settings 上传配置 插件推荐 下面这个是我使用的插件,用同步插件同步后有结果的显示,就是下面的. Align - Version :0.2.0 auto-close-tag - Version :0.3.10 auto-rename-tag - Version :0.0.11 autofilename - Version :0.1.3 autoimport - Version :1.2.2 changeEncode - Version :0.0.8 code-settings-sync - Version :2.6.2 githistory - Version :0.2.0 html-snippets - Version :0.1.0 intelligence-change-case - Version :1.1.0 JavaScriptSnippets - Version :1.4.0 join-lines - Version :0.2.2 jquerysnippets - Version :0.0.1 json-tools - Version :1.0.2 qiniu-fig-bed - Version :0.0.5 vscode-fileheader - Version :0.0.2 vscode-html-css - Version :0.0.36 vscode-icons - Version :7.5.1 vscode-react-native - Version :0.3.2 vscode-todo - Version :0.8.0 安装 code 到环境变量中 将 vscode 添加到环境变量中,在终端就可以执行 code 命令. 按 F1 输入 install,选择 Shell 命令: 在 PATH 中安装 code 命令 注: 安装成功后,可以把 iTerm 中使用的 vi 换成 code 了. Copyright © zhaopeng.me 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-04-11 14:39:42 "}}